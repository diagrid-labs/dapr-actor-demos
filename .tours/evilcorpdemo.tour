{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "EvilCorpDemo",
  "steps": [
    {
      "directory": "EvilCorpDemo",
      "description": "## EvilCorpDemo\n\nA fictional company called EvilCorp ðŸ˜ˆ wants their employees to be more productive and have decided to implement a system with smart alarm clocks that will wake up their employees at 7am. If the employees have not acknowledged the alarm within 3 snoozes, the alarm will send a message to the headquarters to lay off the employee ðŸ˜±.\n\nThe front-end of the demo is a basic HTML page that uses [p5js](https://p5js.org/) to draw the information on the page. The back-end is a [Dapr](https://dapr.io/) application written in ASP.NET that uses actors for the headquarters, the regional office, the employees, and the alarm clocks. Communication between the back-end and the front-end is realized with [Ably](https://ably.com/).\n\n![EvilCorp Demo](./media/evilcorp-demo.gif)\n\n### Running the app\n\nNavigate to the EvilCorpDemo folder:\n>> cd EvilCorpDemo \n\nBuild the project (and restore packages):\n>> dotnet build \n\nUse Dapr multi-app run to start the application:\n>> dapr run -f .\n\nRun the front-end application: [http://localhost:5500](http://localhost:5500)",
      "selection": {
        "start": {
          "line": 9,
          "character": 1
        },
        "end": {
          "line": 9,
          "character": 20
        }
      }
    },
    {
      "file": "EvilCorpDemo/dapr.yaml",
      "description": "## dapr.yaml",
      "line": 1
    },
    {
      "directory": "EvilCorpDemo/EvilCorp.Api",
      "description": "## EvilCorp.Api project\n\nThis folder contains .NET web application that contains the actor definitions and two API endpoints."
    },
    {
      "directory": "EvilCorpDemo/EvilCorp.FrontEnd",
      "description": "## EvilCorp.FrontEnd project\n\nThis folder contains a small node application that loads a static html file that uses p5js to draw the alarm clocks on a web page. "
    },
    {
      "directory": "EvilCorpDemo/EvilCorp.Interfaces",
      "description": "## EvilCorp.Interfaces project\n\nThis folder contains a .NET project with the actor interface definitions."
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Interfaces/EvilCorp.Interfaces.csproj",
      "description": "## Dapr.Actors package reference",
      "line": 10
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Interfaces/ISimulation.cs",
      "description": "## ISimulation",
      "line": 5
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Interfaces/IHeadQuarters.cs",
      "description": "## IHeadQuarters",
      "line": 5
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Interfaces/IRegionalOffice.cs",
      "description": "## IRegionalOffice",
      "line": 5
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Interfaces/IAlarmClock.cs",
      "description": "## IAlarmClock",
      "line": 5
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Interfaces/IEmployee.cs",
      "description": "## IEmployee",
      "line": 5
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/EvilCorp.Api.csproj",
      "description": "## Dapr.Actors.AspNetCore package reference",
      "line": 12
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Program.cs",
      "description": "## Program.cs - AddActors\n\nAdd Actor definitions to the services collection.",
      "line": 19
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Program.cs",
      "description": "## Program.cs - /init endpoint\n\nUses the SimulationActor to initialize the other Actors.",
      "line": 55
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/SimulationActor.cs",
      "description": "## SimulationActor - InitActorAsync\n\nCreates proxies for the other actors and set their initial values.",
      "line": 16
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/SimulationActor.cs",
      "description": "## SimulationActor - AddRegionalOffice\n\nCreates a RegionalOfficeActor and adds alarmclocks and employees to it.",
      "line": 57
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/SimulationActor.cs",
      "description": "## SimulationActor - AddAlarmClocksAndEmployees\n\nCreates a range of AlarmClockActors and EmployeeActors, and returns a dictionary of the ids of the two.",
      "line": 71
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Program.cs",
      "description": "## Program.cs - /start endpoint\n\nUses the SimulationActor to progress the alarm clock time.",
      "line": 57
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/SimulationActor.cs",
      "description": "## SimulationActor - StartTimeAsync\n\nUses the RegionalOfficeActors to set the alarm clock time for all alarm clocks for that region.",
      "line": 42
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/RegionalOfficeActor.cs",
      "description": "## RegionalOfficeActor - SetAlarmClockTime\n\nIterates over the alarm clock IDs and sets the sync time on the AlarmClockActor.",
      "line": 36
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/AlarmClockActor.cs",
      "description": "## AlarmClockActor - SetSyncTimeAsync\n\nSets the alarm clock time, and registers the timer that increments the time.",
      "line": 133
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/AlarmClockActor.cs",
      "description": "## AlarmClockActor - IncrementTimeHandler\n\nThis method is responsible for incrementing the alarm clock time, and handling the alarm in case the alarm clock time is equal to or later than the alarm time. ",
      "line": 149
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/AlarmClockActor.cs",
      "description": "## AlarmClockActor - AlarmHandler\n\nThis method is responsible for getting the employee response, updating the snooze count and informing the regional office in case the employee did not respond on time.",
      "line": 63
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/AlarmClockActor.cs",
      "description": "## AlarmClockActor - GetEmployeeResponseAndExecute",
      "line": 86
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/EmployeeActor.cs",
      "description": "## EmployeeActor - GetAlarmResponse\n\nThis method randomly selects an alarm acknowledge or alarm snoose response and returns that to the caller.",
      "line": 25
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/AlarmClockActor.cs",
      "description": "## AlarmClockActor- SnoozeAlarmAsync",
      "line": 32
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/AlarmClockActor.cs",
      "description": "## AlarmClockActor - FireEmployee",
      "line": 121
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/RegionalOfficeActor.cs",
      "description": "## RegionalOfficeActor - FireEmployee",
      "line": 66
    },
    {
      "file": "EvilCorpDemo/EvilCorp.Api/Actors/HeadQuartersActor.cs",
      "description": "## HeadQuartersActor - FireEmployeeAsync",
      "line": 36
    }
  ]
}